<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/4/2019 11:24:22 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="JSHARPE-P51"
  DTS:CreatorName="JAX\JSharpe"
  DTS:DTSID="{D61A4393-A38C-4A65-931F-717589FD6FF3}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.0900.40"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="85"
  DTS:VersionGUID="{6BB4F47A-55E6-471A-AA86-E8C1F64C89D1}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Flat File Connection Manager]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{A1C042D2-C3D4-4DFA-9763-0BC2674E967F}"
      DTS:ObjectName="Flat File Connection Manager">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">"C:\\Users\\JSharpe\\OneDrive - Swisher International, Inc\\Documents\\810s\\INV810-" + RIGHT("0" + (DT_STR, 4, 1252) DATEPART("yy" , GETDATE()), 4) + RIGHT("0" + (DT_STR, 2, 1252) DATEPART("mm" , GETDATE()), 2) + (DT_STR, 2, 1252) DATEPART("dd" , GETDATE())  + "-" + (DT_STR, 8, 1252)@[User::TranID] + ".txt"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="FixedWidth"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="C:\Users\JSharpe\OneDrive - Swisher International, Inc\Documents\810s\INV810-2019072-0.txt">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnDelimiter=""
              DTS:ColumnWidth="161"
              DTS:DataType="129"
              DTS:ObjectName="Column 0"
              DTS:DTSID="{BA85DB4F-425C-41B8-822D-00B4338629B3}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[sqlsw.CoreMaster.webappadmin]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{4B659815-D6BE-4AA3-958F-B101C3BD653B}"
      DTS:ObjectName="sqlsw.CoreMaster.webappadmin">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=sqlsw;User ID=webappadmin;Initial Catalog=CoreMaster;Provider=SQLNCLI11.1;Auto Translate=False;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAzP30hhmH106VAqyMoZ/5VgAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAADdcZMQbBl95lOXSyb4PIkOAAAAAASAAACgAAAAEAAAANXJ/v4arVl1A9C8HawIltEoAAAAUWiRoXPgA0Es1edxwzm3Vytt2hf/G0fOGW3UAGPpAs85+IKyUcatYhQAAABnNOwgJ85gob7kc6YVl8G2c7bp9w</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E988A6EB-2418-42D2-9091-2279B08DF83B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TranID">
      <DTS:VariableValue
        DTS:DataType="4">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4DB48352-2157-45C3-98A9-35AD03BE58B2}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="TranIDs">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Execute SQL Task"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{87AC1EE5-D278-4900-A336-878656127E35}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute SQL Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{4B659815-D6BE-4AA3-958F-B101C3BD653B}"
          SQLTask:SqlStatementSource="select t.TRANSACTION_ID from TRANSACTIONS t inner join CUSTOMERS c on t.ENTITY_ID = c.CUSTOMER_ID&#xA;&#x9;inner join ORDER_TYPE ot on ot.ORDER_TYPE_ID = t.ORDER_TYPE_ID&#xA;&#x9;where TRANSACTION_TYPE  = 'Invoice' and c.EDI_CUSTOMER = 'T' and ot.ORDER_TYPE_NAME = 'SE - EDI Orders' and t.TRANID in ('302121', '302212',&#xA;'300372',&#xA;'302211', '300909',&#xA;'300373',&#xA;'300032',&#xA;'3032837'&#xA;)&#xA;&#x9;--t.LAST_MODIFIED_DATE &gt; getdate() - 80"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::TranIDs" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{71CBFC16-B391-4F60-A4B1-EE33EA3F7EA6}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{641BFBFB-AC99-49BC-B5C8-77446077779D}"
        DTS:ObjectName="{641BFBFB-AC99-49BC-B5C8-77446077779D}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::TranIDs" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Data Flow Task"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{21A1D063-98CE-4443-9C36-28EF5F27536D}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Data Flow Task">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Foreach Loop Container\Data Flow Task\Data Conversion"
                  componentClassID="Microsoft.DataConvert"
                  contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Data Conversion"
                  name="Data Conversion"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Inputs[Data Conversion Input]"
                      name="Data Conversion Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[810Line]"
                          cachedDataType="wstr"
                          cachedLength="4000"
                          cachedName="810Line"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[810Line]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Outputs[Data Conversion Output]"
                      exclusionGroup="1"
                      name="Data Conversion Output"
                      synchronousInputId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Inputs[Data Conversion Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of 810Line]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          length="161"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of 810Line]"
                          name="Copy of 810Line"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the input column used as the source of data for the conversion."
                              name="SourceInputColumnLineageID">#{Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[810Line]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Outputs[Data Conversion Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Data Conversion Error Output"
                      synchronousInputId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Inputs[Data Conversion Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Data Flow Task\Flat File Destination"
                  componentClassID="Microsoft.FlatFileDestination"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Flat File Destination"
                  localeId="1033"
                  name="Flat File Destination">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                    <property
                      dataType="System.Boolean"
                      description="When text qualifier is enabled, specifies whether the text qualifier in the data written to the destination file will be escaped or not."
                      name="EscapeQualifier">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\Flat File Destination.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[Flat File Connection Manager]"
                      connectionManagerRefId="Package.ConnectionManagers[Flat File Connection Manager]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Data Flow Task\Flat File Destination.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Flat File Destination.Inputs[Flat File Destination Input].Columns[Copy of 810Line]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="161"
                          cachedName="Copy of 810Line"
                          externalMetadataColumnId="Package\Foreach Loop Container\Data Flow Task\Flat File Destination.Inputs[Flat File Destination Input].ExternalColumns[Column 0]"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of 810Line]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Flat File Destination.Inputs[Flat File Destination Input].ExternalColumns[Column 0]"
                          codePage="1252"
                          dataType="str"
                          length="255"
                          name="Column 0" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source"
                  componentClassID="Microsoft.OLEDBSource"
                  contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                  description="OLE DB Source"
                  name="OLE DB Source"
                  usesDispositions="true"
                  version="7">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset"></property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">select '*****' + ISNULL(c.PARTNER_ID_0, 'UNKNO') + SPACE(160 - (5 + LEN(ISNULL(c.PARTNER_ID_0, 'UNKNO')))) + CHAR(10) as [810Line], 
	LEN('*****' + ISNULL(c.PARTNER_ID_0, 'UNKNO') + SPACE(160 - (5 + LEN(ISNULL(c.PARTNER_ID_0, 'UNKNO')))) + CHAR(10)) as LineLength,
	.1 as [rownum],
	'*' as rectype
	from TRANSACTIONS t inner join CUSTOMERS c on t.ENTITY_ID = c.CUSTOMER_ID
	inner join ORDER_TYPE ot on ot.ORDER_TYPE_ID = t.ORDER_TYPE_ID
	where t.TRANSACTION_ID = ?
UNION ALL
select 'H00' + CASE WHEN LEN(ISNULL(c.PARTNER_ID_0,'')) &lt; 12 THEN ISNULL(c.PARTNER_ID_0,'') + SPACE(12 - LEN(ISNULL(c.PARTNER_ID_0,''))) ELSE SUBSTRING(ISNULL(c.PARTNER_ID_0,''), 1, 12) END + 
	CASE WHEN LEN(t.TRANID) &lt; 10 THEN t.TRANID + SPACE(10 - LEN(t.TRANID)) ELSE SUBSTRING(t.TRANID, 1, 10) END +
	CONVERT(varchar, t.TRANDATE + ISNULL(pt.DAYS_UNTIL_DUE,0), 112) +
	CASE WHEN LEN(ISNULL(t.RELATED_TRANID,'')) &lt; 22 THEN ISNULL(t.RELATED_TRANID,'') + SPACE(22 - LEN(ISNULL(t.RELATED_TRANID,''))) ELSE SUBSTRING(ISNULL(t.RELATED_TRANID,''), 1, 22) END +
	CONVERT(varchar, t.PO_DATE, 112) +
	SPACE(2) +
	CASE WHEN t.CREATED_FROM_ID IS NULL THEN 'DR' ELSE 'DI' END +
	SPACE(93) + CHAR(10) as [810Line], 
	LEN('H00' + CASE WHEN LEN(ISNULL(c.PARTNER_ID_0,'')) &lt; 12 THEN ISNULL(c.PARTNER_ID_0,'') + SPACE(12 - LEN(ISNULL(c.PARTNER_ID_0,''))) ELSE SUBSTRING(ISNULL(c.PARTNER_ID_0,''), 1, 12) END + 
	CASE WHEN LEN(t.TRANID) &lt; 10 THEN t.TRANID + SPACE(10 - LEN(t.TRANID)) ELSE SUBSTRING(t.TRANID, 1, 10) END +
	CONVERT(varchar, t.TRANDATE + ISNULL(pt.DAYS_UNTIL_DUE,0), 112) +
	CASE WHEN LEN(ISNULL(t.RELATED_TRANID,'')) &lt; 22 THEN ISNULL(t.RELATED_TRANID,'') + SPACE(22 - LEN(ISNULL(t.RELATED_TRANID,''))) ELSE SUBSTRING(ISNULL(t.RELATED_TRANID,''), 1, 22) END +
	CONVERT(varchar, t.PO_DATE, 112) +
	SPACE(2) +
	CASE WHEN t.CREATED_FROM_ID IS NULL THEN 'DR' ELSE 'DI' END +
	SPACE(93) + CHAR(10)) as LineLength,
	.2 as [rownum],
	'A' as rectype
	from TRANSACTIONS t inner join CUSTOMERS c on t.ENTITY_ID = c.CUSTOMER_ID
	left outer join PAYMENT_TERMS pt on t.PAYMENT_TERMS_ID = pt.PAYMENT_TERMS_ID
	where t.TRANSACTION_ID = ?
UNION ALL
select 'H05IA143074640' + SPACE(146) + CHAR(10) as [810Line], 
	LEN('H05IA143074640' + SPACE(146) + CHAR(10)) as LineLength,
	.3 as [rownum],
	'B' as rectype
	from TRANSACTIONS t inner join CUSTOMERS c on t.ENTITY_ID = c.CUSTOMER_ID
	where t.TRANSACTION_ID = ? and c.PARTNER_ID_0 = 'SAMS'
UNION ALL
select 'H05DP00017' + SPACE(150) + CHAR(10) as [810Line], 
	LEN('H05DP00017' + SPACE(150) + CHAR(10)) as LineLength,
	.4 as [rownum],
	'B' as rectype
	from TRANSACTIONS t inner join CUSTOMERS c on t.ENTITY_ID = c.CUSTOMER_ID
	where t.TRANSACTION_ID = ? and c.PARTNER_ID_0 = 'SAMS'
UNION ALL
select 'H05MR0020' + SPACE(151) + CHAR(10) as [810Line], 
	LEN('H05MR0020' + SPACE(151) + CHAR(10)) as LineLength,
	.5 as [rownum],
	'B' as rectype
	from TRANSACTIONS t inner join CUSTOMERS c on t.ENTITY_ID = c.CUSTOMER_ID
	where t.TRANSACTION_ID = ? and c.PARTNER_ID_0 = 'SAMS'
UNION ALL
select 'H05BM' + CASE WHEN LEN(t.TRANID) &lt; 30 THEN t.TRANID + SPACE(30 - LEN(t.TRANID)) ELSE SUBSTRING(t.TRANID, 1, 30) END +
	CASE WHEN LEN(c.PARTNER_ID_0) &lt; 80 THEN c.PARTNER_ID_0 + SPACE(80 - LEN(c.PARTNER_ID_0)) ELSE SUBSTRING(c.PARTNER_ID_0, 1, 80) END + SPACE(45) + CHAR(10) as [810Line], 
	LEN('H05BM' + CASE WHEN LEN(t.TRANID) &lt; 30 THEN t.TRANID + SPACE(30 - LEN(t.TRANID)) ELSE SUBSTRING(t.TRANID, 1, 30) END +
	CASE WHEN LEN(c.PARTNER_ID_0) &lt; 80 THEN c.PARTNER_ID_0 + SPACE(80 - LEN(c.PARTNER_ID_0)) ELSE SUBSTRING(c.PARTNER_ID_0, 1, 80) END + SPACE(45) + CHAR(10)) as LineLength,
	.6 as [rownum],
	'B' as rectype
	from TRANSACTIONS t inner join CUSTOMERS c on t.ENTITY_ID = c.CUSTOMER_ID
	where t.TRANSACTION_ID = ? and c.PARTNER_ID_0 &lt;&gt; 'SAMS'
UNION ALL
select 'H05FW' + CASE WHEN LEN(ISNULL(cl.LICENSE_NAME, '')) &lt; 30 THEN ISNULL(cl.LICENSE_NAME, '') + SPACE(30 - LEN(ISNULL(cl.LICENSE_NAME, ''))) ELSE SUBSTRING(ISNULL(cl.LICENSE_NAME, ''), 1, 30) END +
	'Vends' + CASE WHEN LEN(ISNULL(c.STATE, SPACE(2))) &gt; 2 THEN SUBSTRING(ISNULL(c.STATE, SPACE(2)), 1, 2) ELSE ISNULL(c.STATE, SPACE(2)) END  + 'Lic:' + CASE WHEN LEN(ISNULL(cl.LICENSE_NAME, '')) &lt; 80 THEN ISNULL(cl.LICENSE_NAME, '') + SPACE(80 - LEN(ISNULL(cl.LICENSE_NAME, ''))) ELSE SUBSTRING(ISNULL(cl.LICENSE_NAME, ''), 1, 80) END +
	SPACE(34) + CHAR(10) as [810Line], 
	LEN('H05FW' + CASE WHEN LEN(ISNULL(cl.LICENSE_NAME, '')) &lt; 30 THEN ISNULL(cl.LICENSE_NAME, '') + SPACE(30 - LEN(ISNULL(cl.LICENSE_NAME, ''))) ELSE SUBSTRING(ISNULL(cl.LICENSE_NAME, ''), 1, 30) END +
	'Vends' + CASE WHEN LEN(ISNULL(c.STATE, SPACE(2))) &gt; 2 THEN SUBSTRING(ISNULL(c.STATE, SPACE(2)), 1, 2) ELSE ISNULL(c.STATE, SPACE(2)) END  + 'Lic:' + CASE WHEN LEN(ISNULL(cl.LICENSE_NAME, '')) &lt; 80 THEN ISNULL(cl.LICENSE_NAME, '') + SPACE(80 - LEN(ISNULL(cl.LICENSE_NAME, ''))) ELSE SUBSTRING(ISNULL(cl.LICENSE_NAME, ''), 1, 80) END +
	SPACE(34) + CHAR(10)) as LineLength,
	.7 as [rownum],
	'B' as rectype
	from TRANSACTIONS t inner join CUSTOMERS c on t.ENTITY_ID = c.CUSTOMER_ID
	inner join CUSTOMER_LICENSING cl on cl.CUSTOMER_ID = c.CUSTOMER_ID
	where t.TRANSACTION_ID = ? and c.PARTNER_ID_0 &lt;&gt; 'SAMS'
UNION ALL
select A.[810Line], A.LineLength, A.rownum, A.rectype from
(select 'H10' + CASE WHEN LEN(ISNULL(a.N1_ID,'')) &lt; 2 THEN ISNULL(a.N1_ID,'') + SPACE(2 - LEN(ISNULL(a.N1_ID,''))) ELSE SUBSTRING(ISNULL(a.N1_ID,''), 1, 2) END +
	CASE WHEN LEN(ISNULL(a.N1_NAME,'')) &lt; 35 THEN ISNULL(a.N1_NAME,'') + SPACE(35 - LEN(ISNULL(a.N1_NAME,''))) ELSE SUBSTRING(ISNULL(a.N1_NAME,''), 1, 35) END +
	CASE WHEN LEN(ISNULL(a.N1_QUALIFIER,'')) &lt; 2 THEN ISNULL(a.N1_QUALIFIER,'') + SPACE(2 - LEN(ISNULL(a.N1_QUALIFIER,''))) ELSE SUBSTRING(ISNULL(a.N1_QUALIFIER,''), 1, 2) END +
	CASE WHEN LEN(ISNULL(a.N1_DUNS,'')) &lt; 17 THEN ISNULL(a.N1_DUNS,'') + SPACE(17 - LEN(ISNULL(a.N1_DUNS,''))) ELSE SUBSTRING(ISNULL(a.N1_DUNS,''), 1, 17) END +
	SPACE(101) + CHAR(10) as [810Line],
	ROW_NUMBER() OVER (ORDER BY a.N1_ID) as [rownum], 
	LEN('H10' + CASE WHEN LEN(ISNULL(a.N1_ID,'')) &lt; 2 THEN ISNULL(a.N1_ID,'') + SPACE(2 - LEN(ISNULL(a.N1_ID,''))) ELSE SUBSTRING(ISNULL(a.N1_ID,''), 1, 2) END +
	CASE WHEN LEN(ISNULL(a.N1_NAME,'')) &lt; 35 THEN ISNULL(a.N1_NAME,'') + SPACE(35 - LEN(ISNULL(a.N1_NAME,''))) ELSE SUBSTRING(ISNULL(a.N1_NAME,''), 1, 35) END +
	CASE WHEN LEN(ISNULL(a.N1_QUALIFIER,'')) &lt; 2 THEN ISNULL(a.N1_QUALIFIER,'') + SPACE(2 - LEN(ISNULL(a.N1_QUALIFIER,''))) ELSE SUBSTRING(ISNULL(a.N1_QUALIFIER,''), 1, 2) END +
	CASE WHEN LEN(ISNULL(a.N1_DUNS,'')) &lt; 17 THEN ISNULL(a.N1_DUNS,'') + SPACE(17 - LEN(ISNULL(a.N1_DUNS,''))) ELSE SUBSTRING(ISNULL(a.N1_DUNS,''), 1, 17) END +
	SPACE(101) + CHAR(10)) as LineLength,
	'C' as rectype
	from TRANSACTIONS t inner join CUSTOMERS c on t.ENTITY_ID = c.CUSTOMER_ID
	inner join ADDRESS_BOOK ab on ab.ENTITY_ID = c.CUSTOMER_ID
	inner join ADDRESSES a on a.ADDRESS_ID = ab.ADDRESS_ID
	where t.TRANSACTION_ID = ? and a.N1_ID is not null
UNION ALL
select 'H15' + 
	CASE WHEN a.N1_ID = 'VN' OR a.N1_ID = 'RT' OR a.N1_ID = 'RE' OR a.N1_ID = 'SU' or a.N1_ID = 'SF' or a.N1_ID = 'RI' THEN 'PO BOX 2230' + SPACE(24) ELSE
		CASE WHEN a.ADDRESS_LINE_1 is null THEN SPACE(35) ELSE 
			CASE WHEN LEN(a.ADDRESS_LINE_1) &lt; 35 THEN a.ADDRESS_LINE_1 + SPACE(35 - LEN(a.ADDRESS_LINE_1)) ELSE SUBSTRING(a.ADDRESS_LINE_1, 1, 35) END
		END
	END +
	CASE WHEN a.ADDRESS_LINE_2 is null THEN SPACE(35) ELSE 
		CASE WHEN LEN(a.ADDRESS_LINE_2) &lt; 35 THEN a.ADDRESS_LINE_2 + SPACE(35 - LEN(a.ADDRESS_LINE_2)) ELSE SUBSTRING(a.ADDRESS_LINE_2, 1, 35) END 
	END +
	SPACE(87) + CHAR(10) as [810Line],
	ROW_NUMBER() OVER (ORDER BY a.N1_ID) as [rownum],
	LEN('H15' + 
	CASE WHEN a.N1_ID = 'VN' OR a.N1_ID = 'RT' OR a.N1_ID = 'RE' OR a.N1_ID = 'SU' or a.N1_ID = 'SF' or a.N1_ID = 'RI' THEN 'PO BOX 2230' + SPACE(24) ELSE
		CASE WHEN a.ADDRESS_LINE_1 is null THEN SPACE(35) ELSE 
			CASE WHEN LEN(a.ADDRESS_LINE_1) &lt; 35 THEN a.ADDRESS_LINE_1 + SPACE(35 - LEN(a.ADDRESS_LINE_1)) ELSE SUBSTRING(a.ADDRESS_LINE_1, 1, 35) END
		END
	END +
	CASE WHEN a.ADDRESS_LINE_2 is null THEN SPACE(35) ELSE 
		CASE WHEN LEN(a.ADDRESS_LINE_2) &lt; 35 THEN a.ADDRESS_LINE_2 + SPACE(35 - LEN(a.ADDRESS_LINE_2)) ELSE SUBSTRING(a.ADDRESS_LINE_2, 1, 35) END 
	END +
	SPACE(87) + CHAR(10)) as LineLength,
	'D' as rectype
	from TRANSACTIONS t inner join CUSTOMERS c on t.ENTITY_ID = c.CUSTOMER_ID
	inner join ADDRESS_BOOK ab on ab.ENTITY_ID = c.CUSTOMER_ID
	inner join ADDRESSES a on a.ADDRESS_ID = ab.ADDRESS_ID
	where t.TRANSACTION_ID = ? and a.N1_ID is not null
UNION ALL
select 'H20' + 
	CASE WHEN a.N1_ID = 'VN' OR a.N1_ID = 'RT' OR a.N1_ID = 'RE' OR a.N1_ID = 'SU' or a.N1_ID = 'SF' or a.N1_ID = 'RI' THEN 'JACKSONVILLE' + SPACE(18) ELSE
		CASE WHEN a.CITY is null THEN SPACE(30) ELSE 
			CASE WHEN LEN(a.CITY) &lt; 30 THEN a.CITY + SPACE(30 - LEN(a.CITY)) ELSE SUBSTRING(a.CITY, 1, 30) END
		END
	END +
	CASE WHEN a.N1_ID = 'VN' OR a.N1_ID = 'RT' OR a.N1_ID = 'RE' OR a.N1_ID = 'SU' or a.N1_ID = 'SF' or a.N1_ID = 'RI' THEN 'FL' ELSE
		CASE WHEN a.STATE is null THEN SPACE(2) ELSE 
			CASE WHEN LEN(a.STATE) &lt; 2 THEN a.STATE + SPACE(2 - LEN(a.STATE)) ELSE SUBSTRING(a.STATE, 1, 2) END
		END
	END +
	CASE WHEN a.N1_ID = 'VN' OR a.N1_ID = 'RT' OR a.N1_ID = 'RE' OR a.N1_ID = 'SU' or a.N1_ID = 'SF' or a.N1_ID = 'RI' THEN '32203    ' ELSE
		CASE WHEN a.ZIP is null THEN SPACE(9) ELSE 
			CASE WHEN LEN(a.ZIP) &lt; 9 THEN a.ZIP + SPACE(9 - LEN(a.ZIP)) ELSE SUBSTRING(a.ZIP, 1, 9) END
		END
	END +
	SPACE(116) + CHAR(10) as [810Line],
	ROW_NUMBER() OVER (ORDER BY a.N1_ID) as [rownum],
	LEN('H20' + 
	CASE WHEN a.N1_ID = 'VN' OR a.N1_ID = 'RT' OR a.N1_ID = 'RE' OR a.N1_ID = 'SU' or a.N1_ID = 'SF' or a.N1_ID = 'RI' THEN 'JACKSONVILLE' + SPACE(18) ELSE
		CASE WHEN a.CITY is null THEN SPACE(30) ELSE 
			CASE WHEN LEN(a.CITY) &lt; 30 THEN a.CITY + SPACE(30 - LEN(a.CITY)) ELSE SUBSTRING(a.CITY, 1, 30) END
		END
	END +
	CASE WHEN a.N1_ID = 'VN' OR a.N1_ID = 'RT' OR a.N1_ID = 'RE' OR a.N1_ID = 'SU' or a.N1_ID = 'SF' or a.N1_ID = 'RI' THEN 'FL' ELSE
		CASE WHEN a.STATE is null THEN SPACE(2) ELSE 
			CASE WHEN LEN(a.STATE) &lt; 2 THEN a.STATE + SPACE(2 - LEN(a.STATE)) ELSE SUBSTRING(a.STATE, 1, 2) END
		END
	END +
	CASE WHEN a.N1_ID = 'VN' OR a.N1_ID = 'RT' OR a.N1_ID = 'RE' OR a.N1_ID = 'SU' or a.N1_ID = 'SF' or a.N1_ID = 'RI' THEN '32203    ' ELSE
		CASE WHEN a.ZIP is null THEN SPACE(9) ELSE 
			CASE WHEN LEN(a.ZIP) &lt; 9 THEN a.ZIP + SPACE(9 - LEN(a.ZIP)) ELSE SUBSTRING(a.ZIP, 1, 9) END
		END
	END +
	SPACE(116) + CHAR(10)) as LineLength,
	'E' as rectype
	from TRANSACTIONS t inner join CUSTOMERS c on t.ENTITY_ID = c.CUSTOMER_ID
	inner join ADDRESS_BOOK ab on ab.ENTITY_ID = c.CUSTOMER_ID
	inner join ADDRESSES a on a.ADDRESS_ID = ab.ADDRESS_ID
	where t.TRANSACTION_ID = ? and a.N1_ID is not null) A
UNION ALL
select distinct 'H25013 ' +
	  CASE WHEN LEN(ISNULL(CAST(CAST(pt.PERCENTAGE_DISCOUNT as decimal(10,1)) as varchar(6)),'0.0')) &lt; 6 THEN ISNULL(CAST(CAST(pt.PERCENTAGE_DISCOUNT as decimal(10,1)) as varchar(6)),'0.0') + SPACE(6 - LEN(ISNULL(CAST(CAST(pt.PERCENTAGE_DISCOUNT as decimal(10,1)) as varchar(6)),'0.0'))) ELSE SUBSTRING(ISNULL(CAST(CAST(pt.PERCENTAGE_DISCOUNT as decimal(10,1)) as varchar(6)),'0.0'), 1, 6) END +
	  CONVERT(varchar, t.TRANDATE, 112) +
	  CASE WHEN LEN(ISNULL(CAST(pt.DAYS_UNTIL_DUE as varchar(3)),CHAR(0))) &lt; 3 THEN ISNULL(CAST(pt.DAYS_UNTIL_DUE as varchar(3)),CHAR(0)) + SPACE(3 - LEN(ISNULL(CAST(pt.DAYS_UNTIL_DUE as varchar(3)),CHAR(0)))) ELSE SUBSTRING(ISNULL(CAST(pt.DAYS_UNTIL_DUE as varchar(3)),CHAR(0)), 1, 3) END +
	  CONVERT(varchar, t.TRANDATE + pt.DAYS_UNTIL_DUE, 112) +
	  CASE WHEN LEN(CAST(pt.DAYS_UNTIL_DUE as varchar(3))) &lt; 3 THEN CAST(pt.DAYS_UNTIL_DUE as varchar(3)) + SPACE(3 - LEN(CAST(pt.DAYS_UNTIL_DUE as varchar(3)))) ELSE CAST(pt.DAYS_UNTIL_DUE as varchar(3)) END +
	  CASE WHEN LEN(CAST(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null and t.TOTAL_PAID is not null THEN pt.PERCENTAGE_DISCOUNT * (select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) / 100 ELSE '0000.0000 ' END as NUMERIC(10,5)) as varchar(10))) &lt; 10 
			   THEN CAST(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null and t.TOTAL_PAID is not null THEN pt.PERCENTAGE_DISCOUNT * (select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) / 100 ELSE '0000.0000 ' END as NUMERIC(10,5)) as varchar(10)) + 
			   SPACE(10 - LEN(CAST(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null and t.TOTAL_PAID is not null THEN pt.PERCENTAGE_DISCOUNT * (select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) / 100 ELSE '0000.0000 ' END as NUMERIC(10,5)) as varchar(10))))
			   ELSE CAST(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null and t.TOTAL_PAID is not null THEN pt.PERCENTAGE_DISCOUNT * (select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) / 100 ELSE '0000.0000 ' END as NUMERIC(10,5)) as varchar(10)) END +
	  CONVERT(varchar, t.DUE_DATE, 112) +
	  CASE WHEN LEN(CAST(CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as NUMERIC(10,4)) as varchar)) &lt; 10 
			   THEN CAST(CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as NUMERIC(10,4)) as varchar) + SPACE(10 - LEN(CAST(CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as NUMERIC(10,4)) as varchar))) 
			   ELSE SUBSTRING(CAST(CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as NUMERIC(10,4)) as varchar), 1, 10) END +
	  CASE WHEN LEN(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null THEN ROUND((pt.PERCENTAGE_DISCOUNT / (select CASE WHEN max(amount) = 0 THEN 1 ELSE max(amount) END from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID)) * 100, 3) ELSE 0 END as varchar(10))) &lt; 5
			   THEN CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null THEN ROUND((pt.PERCENTAGE_DISCOUNT / (select CASE WHEN max(amount) = 0 THEN 1 ELSE max(amount) END from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID)) * 100, 3) ELSE 0 END as varchar(10)) + SPACE(5 - LEN(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null THEN ROUND((pt.PERCENTAGE_DISCOUNT / (select CASE WHEN max(amount) = 0 THEN 1 ELSE max(amount) END from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID)) * 100, 3) ELSE 0 END as varchar(10))))
			   ELSE SUBSTRING(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null THEN ROUND((pt.PERCENTAGE_DISCOUNT / (select CASE WHEN max(amount) = 0 THEN 1 ELSE max(amount) END from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID)) * 100, 3) ELSE 0 END as varchar(10)), 1, 5) END +
	  CASE WHEN LEN(pt.name) &lt; 80 THEN pt.NAME + SPACE(80 - LEN(pt.NAME)) ELSE SPACE(80) END +
	  CASE WHEN LEN(CAST(DAY(t.TRANDATE + pt.DAYS_UNTIL_DUE) as varchar(2))) &lt; 2 THEN  CAST(DAY(t.TRANDATE + pt.DAYS_UNTIL_DUE) as varchar(2)) + SPACE(2 - LEN(CAST(DAY(t.TRANDATE + pt.DAYS_UNTIL_DUE) as varchar(2)))) ELSE CAST(DAY(t.TRANDATE + pt.DAYS_UNTIL_DUE) as varchar(2)) END +
	  SPACE(10) + CHAR(10) as [810Line],
	  LEN('H25013 ' +
	  CASE WHEN LEN(ISNULL(CAST(CAST(pt.PERCENTAGE_DISCOUNT as decimal(10,1)) as varchar(6)),'0.0')) &lt; 6 THEN ISNULL(CAST(CAST(pt.PERCENTAGE_DISCOUNT as decimal(10,1)) as varchar(6)),'0.0') + SPACE(6 - LEN(ISNULL(CAST(CAST(pt.PERCENTAGE_DISCOUNT as decimal(10,1)) as varchar(6)),'0.0'))) ELSE SUBSTRING(ISNULL(CAST(CAST(pt.PERCENTAGE_DISCOUNT as decimal(10,1)) as varchar(6)),'0.0'), 1, 6) END +
	  CONVERT(varchar, t.TRANDATE, 112) +
	  CASE WHEN LEN(ISNULL(CAST(pt.DAYS_UNTIL_DUE as varchar(3)),CHAR(0))) &lt; 3 THEN ISNULL(CAST(pt.DAYS_UNTIL_DUE as varchar(3)),CHAR(0)) + SPACE(3 - LEN(ISNULL(CAST(pt.DAYS_UNTIL_DUE as varchar(3)),CHAR(0)))) ELSE SUBSTRING(ISNULL(CAST(pt.DAYS_UNTIL_DUE as varchar(3)),CHAR(0)), 1, 3) END +
	  CONVERT(varchar, t.TRANDATE + pt.DAYS_UNTIL_DUE, 112) +
	  CASE WHEN LEN(CAST(pt.DAYS_UNTIL_DUE as varchar(3))) &lt; 3 THEN CAST(pt.DAYS_UNTIL_DUE as varchar(3)) + SPACE(3 - LEN(CAST(pt.DAYS_UNTIL_DUE as varchar(3)))) ELSE CAST(pt.DAYS_UNTIL_DUE as varchar(3)) END +
	  CASE WHEN LEN(CAST(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null and t.TOTAL_PAID is not null THEN pt.PERCENTAGE_DISCOUNT * (select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) / 100 ELSE '0000.0000 ' END as NUMERIC(10,5)) as varchar(10))) &lt; 10 
			   THEN CAST(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null and t.TOTAL_PAID is not null THEN pt.PERCENTAGE_DISCOUNT * (select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) / 100 ELSE '0000.0000 ' END as NUMERIC(10,5)) as varchar(10)) + 
			   SPACE(10 - LEN(CAST(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null and t.TOTAL_PAID is not null THEN pt.PERCENTAGE_DISCOUNT * (select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) / 100 ELSE '0000.0000 ' END as NUMERIC(10,5)) as varchar(10))))
			   ELSE CAST(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null and t.TOTAL_PAID is not null THEN pt.PERCENTAGE_DISCOUNT * (select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) / 100 ELSE '0000.0000 ' END as NUMERIC(10,5)) as varchar(10)) END +
	  CONVERT(varchar, t.DUE_DATE, 112) +
	  CASE WHEN LEN(CAST(CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as NUMERIC(10,4)) as varchar)) &lt; 10 
			   THEN CAST(CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as NUMERIC(10,4)) as varchar) + SPACE(10 - LEN(CAST(CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as NUMERIC(10,4)) as varchar))) 
			   ELSE SUBSTRING(CAST(CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as NUMERIC(10,4)) as varchar), 1, 10) END +
	  CASE WHEN LEN(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null THEN ROUND((pt.PERCENTAGE_DISCOUNT / (select CASE WHEN max(amount) = 0 THEN 1 ELSE max(amount) END from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID)) * 100, 3) ELSE 0 END as varchar(10))) &lt; 5
			   THEN CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null THEN ROUND((pt.PERCENTAGE_DISCOUNT / (select CASE WHEN max(amount) = 0 THEN 1 ELSE max(amount) END from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID)) * 100, 3) ELSE 0 END as varchar(10)) + SPACE(5 - LEN(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null THEN ROUND((pt.PERCENTAGE_DISCOUNT / (select CASE WHEN max(amount) = 0 THEN 1 ELSE max(amount) END from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID)) * 100, 3) ELSE 0 END as varchar(10))))
			   ELSE SUBSTRING(CAST(CASE WHEN pt.PERCENTAGE_DISCOUNT is not null THEN ROUND((pt.PERCENTAGE_DISCOUNT / (select CASE WHEN max(amount) = 0 THEN 1 ELSE max(amount) END from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID)) * 100, 3) ELSE 0 END as varchar(10)), 1, 5) END +
	  CASE WHEN LEN(pt.name) &lt; 80 THEN pt.NAME + SPACE(80 - LEN(pt.NAME)) ELSE SPACE(80) END +
	  CASE WHEN LEN(CAST(DAY(t.TRANDATE + pt.DAYS_UNTIL_DUE) as varchar(2))) &lt; 2 THEN  CAST(DAY(t.TRANDATE + pt.DAYS_UNTIL_DUE) as varchar(2)) + SPACE(2 - LEN(CAST(DAY(t.TRANDATE + pt.DAYS_UNTIL_DUE) as varchar(2)))) ELSE CAST(DAY(t.TRANDATE + pt.DAYS_UNTIL_DUE) as varchar(2)) END +
	  SPACE(10) + CHAR(10)) as LineLength,
	  100 as [rownum],
	  'F' as rectype
	from TRANSACTIONs t 
	inner join CUSTOMERS c on t.ENTITY_ID = c.CUSTOMER_ID
	inner join PAYMENT_TERMS pt on t.PAYMENT_TERMS_ID = pt.PAYMENT_TERMS_ID
	where t.TRANSACTION_ID = ?
UNION
select 'H30011' + CONVERT(varchar, t.TRANDATE, 112) + SPACE(146) + CHAR(10) as [810Line],
	DATALENGTH('H30011' + CONVERT(varchar, t.TRANDATE, 112) + SPACE(146) + CHAR(10)) as LineLength,
	200 as [rownum],
	'G' as rectype
	from TRANSACTIONs t 
	where t.TRANSACTION_ID = ?
UNION
select 
	CASE WHEN 
	(select count(*) from
	(select 'H35' + CASE WHEN sv.SHIP_VIA_2_NAME = 'Cash Sale Pick Up' or sv.SHIP_VIA_2_NAME = 'Customer Pick' THEN 'PB' ELSE 'PP' END +
		'ORORIGIN' + SPACE(147) + CHAR(10) as [810Line]
		from TRANSACTIONs t 
		inner join SHIP_VIA_2 sv on t.SHIP_VIA_ID = sv.SHIP_VIA_2_ID
		where t.TRANSACTION_ID = ?) as A) = 0
	THEN 'H35PPORORIGIN' + SPACE(147) + CHAR(10) 
	ELSE (select 'H35' + CASE WHEN sv.SHIP_VIA_2_NAME = 'Cash Sale Pick Up' or sv.SHIP_VIA_2_NAME = 'Customer Pick' THEN 'PB' ELSE 'PP' END +
		'ORORIGIN' + SPACE(147) + CHAR(10) as [810Line]
		from TRANSACTIONs t 
		inner join SHIP_VIA_2 sv on t.SHIP_VIA_ID = sv.SHIP_VIA_2_ID
		where t.TRANSACTION_ID = ?)
	END as [810Line],
	LEN(SPACE(161)) as LineLength,
	300 as [rownum],
	'H' as rectype
UNION
select LineItems.[810Line], LineItems.LineLength, LineItems.rownum, LineItems.rectype from
(select 'D00' + CASE WHEN LEN(t.TRANID) &lt; 10 THEN t.TRANID + SPACE(10 - LEN(t.TRANID)) ELSE SUBSTRING(t.TRANID, 1, 10) END +
	CASE WHEN LEN(CAST((ROW_NUMBER() OVER (ORDER BY tl.ITEM_UOM_UPC_CODE)) as varchar(10))) &lt; 10 THEN CAST((ROW_NUMBER() OVER (ORDER BY tl.ITEM_UOM_UPC_CODE)) as varchar(10)) + SPACE(10 - LEN(CAST((ROW_NUMBER() OVER (ORDER BY tl.ITEM_UOM_UPC_CODE)) as varchar(10)))) ELSE CAST((ROW_NUMBER() OVER (ORDER BY tl.ITEM_UOM_UPC_CODE)) as varchar(10)) END +
	CASE WHEN LEN(CAST((ISNULL(ti.QUANTITY, 0)) as varchar(10))) &lt; 10 THEN CAST((ISNULL(ti.QUANTITY, 0)) as varchar(10)) + SPACE(10 - LEN(CAST((ISNULL(ti.QUANTITY, 0)) as varchar(10)))) ELSE CAST((ISNULL(ti.QUANTITY, 0)) as varchar(10)) END +
	CASE WHEN UOM.NAME &lt;&gt; 'Display' 
	THEN
		CASE WHEN UOM.NAME = 'Case' or UOM.NAME = 'Cs' THEN 'CA' ELSE IIF(UOM.NAME = 'Each', 'EA', SUBSTRING(UOM.NAME, 1, 2)) END
	ELSE 'DS' 
	END +
	CASE WHEN LEN(CAST(CAST(tl.AMOUNT * -1 as DECIMAL(10,2)) as varchar(14))) &lt; 14 THEN CAST(CAST(tl.AMOUNT * -1 as DECIMAL(10,2)) as varchar(14)) + SPACE(14 - LEN(CAST(CAST(tl.AMOUNT * -1 as DECIMAL(10,2)) as varchar(14)))) ELSE CAST(CAST(tl.AMOUNT * -1 as DECIMAL(10,2)) as varchar(14)) END +
	CASE WHEN UOM.NAME &lt;&gt; 'Display' 
	THEN
		CASE WHEN UOM.NAME = 'Case' or UOM.NAME = 'Cs' THEN 'CA' ELSE IIF(UOM.NAME = 'Each', 'EA', SUBSTRING(UOM.NAME, 1, 2)) END
	ELSE 'DS' 
	END +
	'UA' + 
	CASE WHEN tl.ITEM_UOM_UPC_CODE is null THEN SPACE(30) ELSE CASE WHEN LEN(SUBSTRING(tl.ITEM_UOM_UPC_CODE, 2, 12) + SPACE(18)) &lt; 30 THEN SUBSTRING(tl.ITEM_UOM_UPC_CODE, 2, 12) + SPACE(30 - LEN(SUBSTRING(tl.ITEM_UOM_UPC_CODE, 2, 12) + SPACE(18))) ELSE SUBSTRING(tl.ITEM_UOM_UPC_CODE, 2, 12) + SPACE(18) END END +
	'UP' +
	CASE WHEN tl.ITEM_UOM_UPC_CODE is null THEN SPACE(30) ELSE CASE WHEN LEN(SUBSTRING(tl.ITEM_UOM_UPC_CODE, 4, 11) + SPACE(19)) &lt; 30 THEN SUBSTRING(tl.ITEM_UOM_UPC_CODE, 4, 11) + SPACE(30 - LEN(SUBSTRING(tl.ITEM_UOM_UPC_CODE, 4, 11) + SPACE(19))) ELSE SUBSTRING(tl.ITEM_UOM_UPC_CODE, 4, 11) + SPACE(19) END END +
	CASE WHEN tl.CUSTOMER_NO_ is null THEN 'VN' ELSE 'UI' END +
	CASE WHEN LEN(ISNULL(tl.CUSTOMER_NO_, i.NAME)) &lt; 30 THEN ISNULL(tl.CUSTOMER_NO_, i.NAME) + SPACE(30 - LEN(ISNULL(tl.CUSTOMER_NO_, i.NAME))) ELSE SUBSTRING(ISNULL(tl.CUSTOMER_NO_, i.NAME), 1, 30) END +
	CASE WHEN LEN(CAST(ISNULL(i.NO_OF_EACHES, ' ') as varchar(10))) &lt; 10 THEN CAST(ISNULL(i.NO_OF_EACHES, ' ') as varchar(10)) + SPACE(10 - LEN(CAST(ISNULL(i.NO_OF_EACHES, ' ') as varchar(10)))) ELSE SUBSTRING(CAST(ISNULL(i.NO_OF_EACHES, ' ') as varchar(10)), 1, 10) END +
	'EA ' + CHAR(10) as [810Line],
	LEN('D00' + CASE WHEN LEN(t.TRANID) &lt; 10 THEN t.TRANID + SPACE(10 - LEN(t.TRANID)) ELSE SUBSTRING(t.TRANID, 1, 10) END +
	CASE WHEN LEN(CAST((ROW_NUMBER() OVER (ORDER BY tl.ITEM_UOM_UPC_CODE)) as varchar(10))) &lt; 10 THEN CAST((ROW_NUMBER() OVER (ORDER BY tl.ITEM_UOM_UPC_CODE)) as varchar(10)) + SPACE(10 - LEN(CAST((ROW_NUMBER() OVER (ORDER BY tl.ITEM_UOM_UPC_CODE)) as varchar(10)))) ELSE CAST((ROW_NUMBER() OVER (ORDER BY tl.ITEM_UOM_UPC_CODE)) as varchar(10)) END +
	CASE WHEN LEN(CAST((ISNULL(ti.QUANTITY, 0)) as varchar(10))) &lt; 10 THEN CAST((ISNULL(ti.QUANTITY, 0)) as varchar(10)) + SPACE(10 - LEN(CAST((ISNULL(ti.QUANTITY, 0)) as varchar(10)))) ELSE CAST((ISNULL(ti.QUANTITY, 0)) as varchar(10)) END +
	CASE WHEN UOM.NAME &lt;&gt; 'Display' 
	THEN
		CASE WHEN UOM.NAME = 'Case' or UOM.NAME = 'Cs' THEN 'CA' ELSE IIF(UOM.NAME = 'Each', 'EA', SUBSTRING(UOM.NAME, 1, 2)) END
	ELSE 'DS' 
	END +
	CASE WHEN LEN(CAST(CAST(tl.AMOUNT * -1 as DECIMAL(10,2)) as varchar(14))) &lt; 14 THEN CAST(CAST(tl.AMOUNT * -1 as DECIMAL(10,2)) as varchar(14)) + SPACE(14 - LEN(CAST(CAST(tl.AMOUNT * -1 as DECIMAL(10,2)) as varchar(14)))) ELSE CAST(CAST(tl.AMOUNT * -1 as DECIMAL(10,2)) as varchar(14)) END +
	CASE WHEN UOM.NAME &lt;&gt; 'Display' 
	THEN
		CASE WHEN UOM.NAME = 'Case' or UOM.NAME = 'Cs' THEN 'CA' ELSE IIF(UOM.NAME = 'Each', 'EA', SUBSTRING(UOM.NAME, 1, 2)) END
	ELSE 'DS' 
	END +
	'UA' + 
	CASE WHEN tl.ITEM_UOM_UPC_CODE is null THEN SPACE(30) ELSE CASE WHEN LEN(SUBSTRING(tl.ITEM_UOM_UPC_CODE, 2, 12) + SPACE(18)) &lt; 30 THEN SUBSTRING(tl.ITEM_UOM_UPC_CODE, 2, 12) + SPACE(30 - LEN(SUBSTRING(tl.ITEM_UOM_UPC_CODE, 2, 12) + SPACE(18))) ELSE SUBSTRING(tl.ITEM_UOM_UPC_CODE, 2, 12) + SPACE(18) END END +
	'UP' +
	CASE WHEN tl.ITEM_UOM_UPC_CODE is null THEN SPACE(30) ELSE CASE WHEN LEN(SUBSTRING(tl.ITEM_UOM_UPC_CODE, 4, 11) + SPACE(19)) &lt; 30 THEN SUBSTRING(tl.ITEM_UOM_UPC_CODE, 4, 11) + SPACE(30 - LEN(SUBSTRING(tl.ITEM_UOM_UPC_CODE, 4, 11) + SPACE(19))) ELSE SUBSTRING(tl.ITEM_UOM_UPC_CODE, 4, 11) + SPACE(19) END END +
	CASE WHEN tl.CUSTOMER_NO_ is null THEN 'VN' ELSE 'UI' END +
	CASE WHEN LEN(ISNULL(tl.CUSTOMER_NO_, i.NAME)) &lt; 30 THEN ISNULL(tl.CUSTOMER_NO_, i.NAME) + SPACE(30 - LEN(ISNULL(tl.CUSTOMER_NO_, i.NAME))) ELSE SUBSTRING(ISNULL(tl.CUSTOMER_NO_, i.NAME), 1, 30) END +
	CASE WHEN LEN(CAST(ISNULL(i.NO_OF_EACHES, ' ') as varchar(10))) &lt; 10 THEN CAST(ISNULL(i.NO_OF_EACHES, ' ') as varchar(10)) + SPACE(10 - LEN(CAST(ISNULL(i.NO_OF_EACHES, ' ') as varchar(10)))) ELSE SUBSTRING(CAST(ISNULL(i.NO_OF_EACHES, ' ') as varchar(10)), 1, 10) END +
	'EA ' + CHAR(10)) as LineLength,
	400 + ROW_NUMBER() OVER (ORDER BY tl.ITEM_UOM_UPC_CODE) as [rownum],
	'I' as rectype
	from TRANSACTIONs t
	inner join TRANSACTION_LINES tl on t.TRANSACTION_ID = tl.TRANSACTION_ID
	inner join UOM on uom.UOM_ID = tl.UNIT_OF_MEASURE_ID
	inner join ITEMS i on tl.ITEM_ID = i.ITEM_ID
	inner join TRANSACTION_INVENTORY_NUMBERS ti on tl.TRANSACTION_ID = ti.TRANSACTION_ID and tl.TRANSACTION_LINE_ID = ti.TRANSACTION_LINE
	where tl.ITEM_UOM_UPC_CODE is not null and t.TRANSACTION_ID = ?
UNION
select 'D05F' + CASE WHEN LEN(tl.MEMO) &lt; 45 THEN tl.MEMO + SPACE(45 - LEN(tl.MEMO)) ELSE SUBSTRING(tl.MEMO, 1, 45) END + SPACE(111) + CHAR(10),
	LEN('D05F' + CASE WHEN LEN(tl.MEMO) &lt; 45 THEN tl.MEMO + SPACE(45 - LEN(tl.MEMO)) ELSE SUBSTRING(tl.MEMO, 1, 45) END + SPACE(111) + CHAR(10)) as LineLength,
	400 + ROW_NUMBER() OVER (ORDER BY tl.ITEM_UOM_UPC_CODE) as [rownum],
	'J' as rectype
	from TRANSACTIONs t 
	inner join TRANSACTION_LINES tl on t.TRANSACTION_ID = tl.TRANSACTION_ID
	where tl.ITEM_UOM_UPC_CODE is not null and t.TRANSACTION_ID = ?
UNION
select 'D10' +
	CASE WHEN LEN(CAST(ISNULL(i.[ITEMS_PER_UNIT_LOWEST_SELLABL], ' ') as varchar)) &lt; 6 THEN CAST(ISNULL(i.[ITEMS_PER_UNIT_LOWEST_SELLABL], ' ') as varchar) + SPACE(6 - LEN(CAST(ISNULL(i.[ITEMS_PER_UNIT_LOWEST_SELLABL], ' ') as varchar))) ELSE CAST(ISNULL(i.[ITEMS_PER_UNIT_LOWEST_SELLABL], ' ') as varchar) END +
	SPACE(2) +
	CASE WHEN LEN(CAST((ISNULL(ti.QUANTITY, 1)) as varchar(10))) &lt; 10 THEN CAST((ISNULL(ti.QUANTITY, 1)) as varchar(10)) + SPACE(10 - LEN(CAST((ISNULL(ti.QUANTITY, 1)) as varchar(10)))) ELSE CAST((ISNULL(ti.QUANTITY, 1)) as varchar(10)) END +
	'EA' +
	CASE WHEN LEN(CAST(tl.ITEM_NO_OF_EACHES as varchar(10))) &lt; 10 THEN CAST(tl.ITEM_NO_OF_EACHES as varchar(10)) + SPACE(10 - LEN(CAST(tl.ITEM_NO_OF_EACHES as varchar(10)))) ELSE SUBSTRING(CAST(tl.ITEM_NO_OF_EACHES as varchar(10)), 1, 10) END +
	'  ' + SPACE(8) +
	CASE WHEN cl.NAME = 'Smokeless' or cl.NAME = 'Chew' or cl.NAME = 'Dry Snuff' or cl.NAME = 'Moist Snuff' THEN 'N ' ELSE SPACE(2) END +
	CASE WHEN cl.NAME = 'Smokeless' or cl.NAME = 'Chew' or cl.NAME = 'Dry Snuff' or cl.NAME = 'Moist Snuff' THEN
		CASE WHEN LEN(CAST(ISNULL(ti.QUANTITY, 1) * ISNULL(i.WEIGHT,0) as varchar)) &lt; 9 
			THEN CAST(ISNULL(ti.QUANTITY, 1) * ISNULL(i.WEIGHT,0) as varchar) + SPACE(9 - LEN(CAST(ISNULL(ti.QUANTITY, 1) * ISNULL(i.WEIGHT,0) as varchar))) 
			ELSE SUBSTRING(CAST(ISNULL(ti.QUANTITY, 1) * ISNULL(i.WEIGHT,0) as varchar), 1, 8) 
		END
	ELSE SPACE(9)
	END +
	CASE WHEN cl.NAME = 'Smokeless' or cl.NAME = 'Chew' or cl.NAME = 'Dry Snuff' or cl.NAME = 'Moist Snuff' THEN 'OZ' ELSE SPACE(2) END +
	SPACE(104) + CHAR(10) as [810Line],
	LEN('D10' +
	CASE WHEN LEN(CAST(ISNULL(i.[ITEMS_PER_UNIT_LOWEST_SELLABL], ' ') as varchar)) &lt; 6 THEN CAST(ISNULL(i.[ITEMS_PER_UNIT_LOWEST_SELLABL], ' ') as varchar) + SPACE(6 - LEN(CAST(ISNULL(i.[ITEMS_PER_UNIT_LOWEST_SELLABL], ' ') as varchar))) ELSE CAST(ISNULL(i.[ITEMS_PER_UNIT_LOWEST_SELLABL], ' ') as varchar) END +
	SPACE(2) +
	CASE WHEN LEN(CAST((ISNULL(ti.QUANTITY, 1)) as varchar(10))) &lt; 10 THEN CAST((ISNULL(ti.QUANTITY, 1)) as varchar(10)) + SPACE(10 - LEN(CAST((ISNULL(ti.QUANTITY, 1)) as varchar(10)))) ELSE CAST((ISNULL(ti.QUANTITY, 1)) as varchar(10)) END +
	'EA' +
	CASE WHEN LEN(CAST(tl.ITEM_NO_OF_EACHES as varchar(10))) &lt; 10 THEN CAST(tl.ITEM_NO_OF_EACHES as varchar(10)) + SPACE(10 - LEN(CAST(tl.ITEM_NO_OF_EACHES as varchar(10)))) ELSE SUBSTRING(CAST(tl.ITEM_NO_OF_EACHES as varchar(10)), 1, 10) END +
	'  ' + SPACE(8) +
	CASE WHEN cl.NAME = 'Smokeless' or cl.NAME = 'Chew' or cl.NAME = 'Dry Snuff' or cl.NAME = 'Moist Snuff' THEN 'N ' ELSE SPACE(2) END +
	CASE WHEN cl.NAME = 'Smokeless' or cl.NAME = 'Chew' or cl.NAME = 'Dry Snuff' or cl.NAME = 'Moist Snuff' THEN
		CASE WHEN LEN(CAST(ISNULL(ti.QUANTITY, 1) * ISNULL(i.WEIGHT,0) as varchar)) &lt; 9 
			THEN CAST(ISNULL(ti.QUANTITY, 1) * ISNULL(i.WEIGHT,0) as varchar) + SPACE(9 - LEN(CAST(ISNULL(ti.QUANTITY, 1) * ISNULL(i.WEIGHT,0) as varchar))) 
			ELSE SUBSTRING(CAST(ISNULL(ti.QUANTITY, 1) * ISNULL(i.WEIGHT,0) as varchar), 1, 8) 
		END
	ELSE SPACE(9)
	END +
	CASE WHEN cl.NAME = 'Smokeless' or cl.NAME = 'Chew' or cl.NAME = 'Dry Snuff' or cl.NAME = 'Moist Snuff' THEN 'OZ' ELSE SPACE(2) END +
	SPACE(104) + CHAR(10)) as LineLength,
	400 + ROW_NUMBER() OVER (ORDER BY tl.ITEM_UOM_UPC_CODE) as [rownum],
	'K' as rectype
	from TRANSACTIONs t 
	inner join TRANSACTION_LINES tl on t.TRANSACTION_ID = tl.TRANSACTION_ID
	inner join TRANSACTION_INVENTORY_NUMBERS ti on t.TRANSACTION_ID = ti.TRANSACTION_ID and tl.TRANSACTION_LINE_ID = ti.TRANSACTION_LINE
	inner join ITEMS i on tl.ITEM_ID = i.ITEM_ID
	inner join CLASSES cl on tl.CLASS_ID = cl.CLASS_ID
	where tl.ITEM_UOM_UPC_CODE is not null and t.TRANSACTION_ID = ?) as LineItems
UNION
select 'D15A5  ' + SPACE(10) + '02' + 
	CASE WHEN LEN(CAST((t.DISCOUNT_APPLIED / 1) as varchar)) &lt; 9 THEN + CAST((t.DISCOUNT_APPLIED / 1) as varchar) + SPACE(9 - LEN(CAST((t.DISCOUNT_APPLIED / 1) as varchar))) ELSE CAST((t.DISCOUNT_APPLIED / 1) as varchar) END +
	CASE WHEN LEN(CAST(t.DISCOUNT_APPLIED*-1 as varchar)) &lt; 9 THEN CAST(t.DISCOUNT_APPLIED*-1 as varchar) + SPACE(9 - LEN(CAST(t.DISCOUNT_APPLIED*-1 as varchar))) ELSE CAST(t.DISCOUNT_APPLIED*-1 as varchar) END +
	CASE WHEN LEN(CAST(1 as varchar)) &lt; 10 THEN CAST(1 as varchar) + SPACE(10 - LEN(CAST(1 as varchar))) ELSE CAST(1 as varchar) END +
	CASE WHEN LEN(CAST((t.DISCOUNT_APPLIED / 1) as varchar)) &lt; 80 THEN  CAST((t.DISCOUNT_APPLIED / 1) as varchar) + SPACE(80 - LEN(CAST((t.DISCOUNT_APPLIED / 1) as varchar))) ELSE CAST((t.DISCOUNT_APPLIED / 1) as varchar) END +
	'F800' + SPACE(29) + CHAR(10) as [810Line],
	LEN('D15A5  ' + SPACE(10) + '02' + 
	CASE WHEN LEN(CAST((t.DISCOUNT_APPLIED / 1) as varchar)) &lt; 9 THEN + CAST((t.DISCOUNT_APPLIED / 1) as varchar) + SPACE(9 - LEN(CAST((t.DISCOUNT_APPLIED / 1) as varchar))) ELSE CAST((t.DISCOUNT_APPLIED / 1) as varchar) END +
	CASE WHEN LEN(CAST(t.DISCOUNT_APPLIED*-1 as varchar)) &lt; 9 THEN CAST(t.DISCOUNT_APPLIED*-1 as varchar) + SPACE(9 - LEN(CAST(t.DISCOUNT_APPLIED*-1 as varchar))) ELSE CAST(t.DISCOUNT_APPLIED*-1 as varchar) END +
	CASE WHEN LEN(CAST(1 as varchar)) &lt; 10 THEN CAST(1 as varchar) + SPACE(10 - LEN(CAST(1 as varchar))) ELSE CAST(1 as varchar) END +
	CASE WHEN LEN(CAST((t.DISCOUNT_APPLIED / 1) as varchar)) &lt; 80 THEN  CAST((t.DISCOUNT_APPLIED / 1) as varchar) + SPACE(80 - LEN(CAST((t.DISCOUNT_APPLIED / 1) as varchar))) ELSE CAST((t.DISCOUNT_APPLIED / 1) as varchar) END +
	'F800' + SPACE(29) + CHAR(10)) as LineLength,
	1000 as [rownum],
	'L' as rectype
	from TRANSACTIONs t 
	inner join CUSTOMERS c on t.ENTITY_ID = c.CUSTOMER_ID
	where t.TRANSACTION_ID = ?
UNION
select 'S00' + 
	CASE WHEN LEN(t.TRANID) &lt; 10 THEN t.TRANID + SPACE(10 - LEN(t.TRANID)) ELSE SUBSTRING(t.TRANID, 1, 10) END +
	CONVERT(varchar, t.TRANDATE, 112) +
	CASE WHEN LEN(CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as varchar)) &lt; 10 THEN CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as varchar) + SPACE(10 - LEN(CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as varchar))) ELSE CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as varchar) END +
	CASE WHEN LEN(CAST(((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) - ISNULL(t.AMOUNT_PAID,0)) as varchar)) &lt; 10 THEN  CAST(((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) - ISNULL(t.AMOUNT_PAID,0)) as varchar) + SPACE(10 - LEN(CAST(((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) - ISNULL(t.AMOUNT_PAID,0)) as varchar))) ELSE CAST(((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) - ISNULL(t.AMOUNT_PAID,0)) as varchar) END +
	CASE WHEN LEN(CAST((t.DISCOUNT_APPLIED) as varchar)) &lt; 10 THEN  CAST((t.DISCOUNT_APPLIED) as varchar) + SPACE(10 - LEN(CAST((t.DISCOUNT_APPLIED) as varchar))) ELSE CAST((t.DISCOUNT_APPLIED) as varchar) END +
	SPACE(109) + CHAR(10) as [810Line],
	LEN('S00' + 
	CASE WHEN LEN(t.TRANID) &lt; 10 THEN t.TRANID + SPACE(10 - LEN(t.TRANID)) ELSE SUBSTRING(t.TRANID, 1, 10) END +
	CONVERT(varchar, t.TRANDATE, 112) +
	CASE WHEN LEN(CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as varchar)) &lt; 10 THEN CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as varchar) + SPACE(10 - LEN(CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as varchar))) ELSE CAST((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) as varchar) END +
	CASE WHEN LEN(CAST(((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) - ISNULL(t.AMOUNT_PAID,0)) as varchar)) &lt; 10 THEN  CAST(((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) - ISNULL(t.AMOUNT_PAID,0)) as varchar) + SPACE(10 - LEN(CAST(((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) - ISNULL(t.AMOUNT_PAID,0)) as varchar))) ELSE CAST(((select max(amount) from TRANSACTION_LINES tl where tl.TRANSACTION_ID = t.TRANSACTION_ID) - ISNULL(t.AMOUNT_PAID,0)) as varchar) END +
	CASE WHEN LEN(CAST((t.DISCOUNT_APPLIED) as varchar)) &lt; 10 THEN  CAST((t.DISCOUNT_APPLIED) as varchar) + SPACE(10 - LEN(CAST((t.DISCOUNT_APPLIED) as varchar))) ELSE CAST((t.DISCOUNT_APPLIED) as varchar) END +
	SPACE(109) + CHAR(10)) as LineLength,
	1100  as [rownum],
	'M' as rectype
	from TRANSACTIONs t 
	where t.TRANSACTION_ID = ?
UNION
select 'S05M ' + SPACE(10) +
	CASE WHEN t.BOL_NO_PDF is null THEN CASE WHEN LEN(sv.SHIP_VIA_2_NAME) &lt; 35 THEN sv.SHIP_VIA_2_NAME + SPACE(35 - LEN(sv.SHIP_VIA_2_NAME)) ELSE SUBSTRING(sv.SHIP_VIA_2_NAME, 1, 35) END  ELSE CASE WHEN LEN(sv.SHIP_VIA_2_NAME + t.BOL_NO_PDF) &lt; 35 THEN sv.SHIP_VIA_2_NAME + t.BOL_NO_PDF + SPACE(35 - LEN(sv.SHIP_VIA_2_NAME + t.BOL_NO_PDF)) ELSE SUBSTRING(sv.SHIP_VIA_2_NAME + t.BOL_NO_PDF, 1, 35) END END +
	SPACE(2) +
	CASE WHEN t.BOL_NO_PDF is null THEN 'BM ' ELSE 'FR ' END +
	CASE WHEN LEN(t.TRANID) &lt; 30 THEN t.TRANID + SPACE(30 - LEN(t.TRANID)) ELSE SUBSTRING(t.TRANID, 1, 30) END +
	SPACE(75) + CHAR(10) as [810Line],
	LEN( 'S05M ' + SPACE(10) +
	CASE WHEN t.BOL_NO_PDF is null THEN CASE WHEN LEN(sv.SHIP_VIA_2_NAME) &lt; 35 THEN sv.SHIP_VIA_2_NAME + SPACE(35 - LEN(sv.SHIP_VIA_2_NAME)) ELSE SUBSTRING(sv.SHIP_VIA_2_NAME, 1, 35) END  ELSE CASE WHEN LEN(sv.SHIP_VIA_2_NAME + t.BOL_NO_PDF) &lt; 35 THEN sv.SHIP_VIA_2_NAME + t.BOL_NO_PDF + SPACE(35 - LEN(sv.SHIP_VIA_2_NAME + t.BOL_NO_PDF)) ELSE SUBSTRING(sv.SHIP_VIA_2_NAME + t.BOL_NO_PDF, 1, 35) END END +
	SPACE(2) +
	CASE WHEN t.BOL_NO_PDF is null THEN 'BM ' ELSE 'FR ' END +
	CASE WHEN LEN(t.TRANID) &lt; 30 THEN t.TRANID + SPACE(30 - LEN(t.TRANID)) ELSE SUBSTRING(t.TRANID, 1, 30) END +
	SPACE(75) + CHAR(10)) as LineLength,
	1200  as [rownum],
	'N' as rectype
	from TRANSACTIONs t 
	inner join SHIP_VIA_2 sv on t.SHIP_VIA_ID = sv.SHIP_VIA_2_ID
	where t.TRANSACTION_ID = ?
UNION
select 'S15' +
	CASE WHEN LEN(CAST(CAST(SUM(ISNULL(ti.QUANTITY, 0)) as DECIMAL(10,2)) as varchar)) &lt; 10 THEN CAST(CAST(SUM(ISNULL(ti.QUANTITY, 0)) as DECIMAL(10,2)) as varchar) + SPACE(10 - LEN(CAST(CAST(SUM(ISNULL(ti.QUANTITY, 0)) as DECIMAL(10,2)) as varchar))) ELSE SUBSTRING(CAST(CAST(SUM(ISNULL(ti.QUANTITY, 0)) as DECIMAL(10,2)) as varchar), 1, 10) END +
	'CA' +
	CASE WHEN SUM(ISNULL(i.WEIGHT, 0)) = 0 THEN
		'0000000001'
	ELSE 
		CASE WHEN LEN(CAST(CAST(IIF(SUM(ISNULL(i.WEIGHT, 0)) &lt; 1, 1, SUM(ISNULL(i.WEIGHT, 0))) as DECIMAL(10,2)) as varchar)) &lt; 10
			THEN CAST(CAST(IIF(SUM(ISNULL(i.WEIGHT, 0)) &lt; 1, 1, SUM(ISNULL(i.WEIGHT, 0))) as DECIMAL(10,2)) as varchar) + SPACE(10 - LEN(CAST(CAST(IIF(SUM(ISNULL(i.WEIGHT, 0)) &lt; 1, 1, SUM(ISNULL(i.WEIGHT, 0))) as DECIMAL(10,2)) as varchar))) 
			ELSE SUBSTRING(CAST(CAST(SUM(ISNULL(i.WEIGHT, 0)) as DECIMAL(10,2)) as varchar), 1, 10) 
		END
	END +
	'LB' + 
	CASE WHEN LEN(CAST(CAST(SUM(ISNULL(i.HEIGHT,1) * ISNULL(i.WIDTH,1) * ISNULL(i.LENGTH_0,1)) as DECIMAL(10,2)) as varchar)) &lt; 8 
		THEN CAST(CAST(SUM(ISNULL(i.HEIGHT,1) * ISNULL(i.WIDTH,1) * ISNULL(i.LENGTH_0,1)) as DECIMAL(10,2)) as varchar) + SPACE(8 -LEN(CAST(CAST(SUM(ISNULL(i.HEIGHT,1) * ISNULL(i.WIDTH,1) * ISNULL(i.LENGTH_0,1)) as DECIMAL(10,2)) as varchar)))
		ELSE SUBSTRING(CAST(CAST(SUM(ISNULL(i.HEIGHT,1) * ISNULL(i.WIDTH,1) * ISNULL(i.LENGTH_0,1)) as DECIMAL(10,2)) as varchar), 1, 8)
	END +
	'CF' + 
	CASE WHEN LEN(CAST(COUNT(*) as varchar)) &lt; 6 THEN CAST(COUNT(*) as varchar) + SPACE(6 - LEN(CAST(COUNT(*) as varchar))) ELSE SUBSTRING(CAST(COUNT(*) as varchar), 1, 6) END +
	SPACE(117) + CHAR(10) as [810Line],
	LEN('S15' +
	CASE WHEN LEN(CAST(CAST(SUM(ISNULL(ti.QUANTITY, 0)) as DECIMAL(10,2)) as varchar)) &lt; 10 THEN CAST(CAST(SUM(ISNULL(ti.QUANTITY, 0)) as DECIMAL(10,2)) as varchar) + SPACE(10 - LEN(CAST(CAST(SUM(ISNULL(ti.QUANTITY, 0)) as DECIMAL(10,2)) as varchar))) ELSE SUBSTRING(CAST(CAST(SUM(ISNULL(ti.QUANTITY, 0)) as DECIMAL(10,2)) as varchar), 1, 10) END +
	'CA' +
	CASE WHEN SUM(ISNULL(i.WEIGHT, 0)) = 0 THEN
		'0000000001'
	ELSE 
		CASE WHEN LEN(CAST(CAST(IIF(SUM(ISNULL(i.WEIGHT, 0)) &lt; 1, 1, SUM(ISNULL(i.WEIGHT, 0))) as DECIMAL(10,2)) as varchar)) &lt; 10
			THEN CAST(CAST(IIF(SUM(ISNULL(i.WEIGHT, 0)) &lt; 1, 1, SUM(ISNULL(i.WEIGHT, 0))) as DECIMAL(10,2)) as varchar) + SPACE(10 - LEN(CAST(CAST(IIF(SUM(ISNULL(i.WEIGHT, 0)) &lt; 1, 1, SUM(ISNULL(i.WEIGHT, 0))) as DECIMAL(10,2)) as varchar))) 
			ELSE SUBSTRING(CAST(CAST(SUM(ISNULL(i.WEIGHT, 0)) as DECIMAL(10,2)) as varchar), 1, 10) 
		END
	END +
	'LB' + 
	CASE WHEN LEN(CAST(CAST(SUM(ISNULL(i.HEIGHT,1) * ISNULL(i.WIDTH,1) * ISNULL(i.LENGTH_0,1)) as DECIMAL(10,2)) as varchar)) &lt; 8 
		THEN CAST(CAST(SUM(ISNULL(i.HEIGHT,1) * ISNULL(i.WIDTH,1) * ISNULL(i.LENGTH_0,1)) as DECIMAL(10,2)) as varchar) + SPACE(8 -LEN(CAST(CAST(SUM(ISNULL(i.HEIGHT,1) * ISNULL(i.WIDTH,1) * ISNULL(i.LENGTH_0,1)) as DECIMAL(10,2)) as varchar)))
		ELSE SUBSTRING(CAST(CAST(SUM(ISNULL(i.HEIGHT,1) * ISNULL(i.WIDTH,1) * ISNULL(i.LENGTH_0,1)) as DECIMAL(10,2)) as varchar), 1, 8)
	END +
	'CF' + 
	CASE WHEN LEN(CAST(COUNT(*) as varchar)) &lt; 6 THEN CAST(COUNT(*) as varchar) + SPACE(6 - LEN(CAST(COUNT(*) as varchar))) ELSE SUBSTRING(CAST(COUNT(*) as varchar), 1, 6) END +
	SPACE(117) + CHAR(10)) as LineLength,
	1400  as [rownum],
	'P' as rectype
	from TRANSACTIONs t 
	inner join TRANSACTION_LINES tl on t.TRANSACTION_ID = tl.TRANSACTION_ID
	inner join TRANSACTION_INVENTORY_NUMBERS ti on t.TRANSACTION_ID = ti.TRANSACTION_ID and tl.TRANSACTION_LINE_ID = ti.TRANSACTION_LINE
	inner join iTEMS i on tl.ITEM_ID = i.ITEM_ID
	where tl.ITEM_UOM_UPC_CODE is not null and(tl.ITEMTYPE = 'Assembly/Bill of Materials' or tl.ITEMTYPE = 'Inventory Item') and tl.AMOUNT is not null and t.TRANSACTION_ID = ?
ORDER BY [rownum], rectype</property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">2</property>
                    <property
                      dataType="System.String"
                      description="The mappings between the parameters in the SQL command and variables."
                      name="ParameterMapping">"Parameter0:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter1:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter2:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter3:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter4:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter5:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter6:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter7:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter8:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter9:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter10:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter11:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter12:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter13:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter14:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter15:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter16:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter17:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter18:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter19:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter20:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};"Parameter21:Input",{E988A6EB-2418-42D2-9091-2279B08DF83B};</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[sqlsw.CoreMaster.webappadmin]"
                      connectionManagerRefId="Package.ConnectionManagers[sqlsw.CoreMaster.webappadmin]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output]"
                      name="OLE DB Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[810Line]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[810Line]"
                          length="4000"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[810Line]"
                          name="810Line"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[LineLength]"
                          dataType="i4"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[LineLength]"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[LineLength]"
                          name="LineLength"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[rownum]"
                          dataType="i8"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[rownum]"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[rownum]"
                          name="rownum"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[rectype]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[rectype]"
                          length="1"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[rectype]"
                          name="rectype"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[810Line]"
                          dataType="wstr"
                          length="4000"
                          name="810Line" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[LineLength]"
                          dataType="i4"
                          name="LineLength" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[rownum]"
                          dataType="numeric"
                          name="rownum"
                          precision="20"
                          scale="1" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[rectype]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          name="rectype" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output]"
                      isErrorOut="true"
                      name="OLE DB Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[810Line]"
                          dataType="wstr"
                          length="4000"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[810Line]"
                          name="810Line" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[LineLength]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[LineLength]"
                          name="LineLength" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[rownum]"
                          dataType="numeric"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[rownum]"
                          name="rownum"
                          precision="20"
                          scale="1" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[rectype]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[rectype]"
                          name="rectype" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Foreach Loop Container\Data Flow Task.Paths[Data Conversion Output]"
                  endId="Package\Foreach Loop Container\Data Flow Task\Flat File Destination.Inputs[Flat File Destination Input]"
                  name="Data Conversion Output"
                  startId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Outputs[Data Conversion Output]" />
                <path
                  refId="Package\Foreach Loop Container\Data Flow Task.Paths[OLE DB Source Output]"
                  endId="Package\Foreach Loop Container\Data Flow Task\Data Conversion.Inputs[Data Conversion Input]"
                  name="OLE DB Source Output"
                  startId="Package\Foreach Loop Container\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{51A07048-7E90-4A42-AF01-077B7AF8FFFA}"
          DTS:ObjectName="{51A07048-7E90-4A42-AF01-077B7AF8FFFA}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::TranID" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{6578CD3E-1C7B-435C-B4D1-4D3FBF03DB7E}"
      DTS:From="Package\Execute SQL Task"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Foreach Loop Container" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="163,42"
          Id="Package\Execute SQL Task"
          TopLeft="248,60" />
        <NodeLayout
          Size="151,42"
          Id="Package\Foreach Loop Container\Data Flow Task"
          TopLeft="57.2142809751081,30.5235282620757" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="264,153"
          Size="264,196"
          Id="Package\Foreach Loop Container"
          TopLeft="300,168" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="329.5,102">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="102.5,66"
              Start="0,0"
              End="102.5,58.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29" />
                  <mssgle:CubicBezierSegment
                    Point1="0,29"
                    Point2="0,33"
                    Point3="4,33" />
                  <mssgle:LineSegment
                    End="98.5,33" />
                  <mssgle:CubicBezierSegment
                    Point1="98.5,33"
                    Point2="102.5,33"
                    Point3="102.5,37" />
                  <mssgle:LineSegment
                    End="102.5,58.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Foreach Loop Container\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="150,42"
          Id="Package\Foreach Loop Container\Data Flow Task\OLE DB Source"
          TopLeft="111,42" />
        <NodeLayout
          Size="172,42"
          Id="Package\Foreach Loop Container\Data Flow Task\Flat File Destination"
          TopLeft="118,214" />
        <NodeLayout
          Size="156,42"
          Id="Package\Foreach Loop Container\Data Flow Task\Data Conversion"
          TopLeft="249,126" />
        <EdgeLayout
          Id="Package\Foreach Loop Container\Data Flow Task.Paths[OLE DB Source Output]"
          TopLeft="186,84">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="141,42"
              Start="0,0"
              End="141,34.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17" />
                  <mssgle:CubicBezierSegment
                    Point1="0,17"
                    Point2="0,21"
                    Point3="4,21" />
                  <mssgle:LineSegment
                    End="137,21" />
                  <mssgle:CubicBezierSegment
                    Point1="137,21"
                    Point2="141,21"
                    Point3="141,25" />
                  <mssgle:LineSegment
                    End="141,34.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container\Data Flow Task.Paths[Data Conversion Output]"
          TopLeft="327,168">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-123,46"
              Start="0,0"
              End="-123,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19" />
                  <mssgle:CubicBezierSegment
                    Point1="0,19"
                    Point2="0,23"
                    Point3="-4,23" />
                  <mssgle:LineSegment
                    End="-119,23" />
                  <mssgle:CubicBezierSegment
                    Point1="-119,23"
                    Point2="-123,23"
                    Point3="-123,27" />
                  <mssgle:LineSegment
                    End="-123,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Foreach Loop Container\Data Flow Task\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>
